Threading Notes

- Trackers are thread-local, since they need to use the tracee.
- SequencePoints are both thread-local and memcheck-global -- this is difficult.
  SequencePoints should mainly just stop execution instead of doing their own pre/post work.


Interface for threads:
1. Start thread
2.


What about futexes? Will those cause issues?
One workaround would be to only let one thread ever execute a system call

ALTERNATIVE:

----------

fork() after each sequence point

-------

In start_round(), fork process. (Be sure to register w/ patcher.)
[X] Tracee::syscall needs to support fork, or create separate fork call.


Memcheck::start_round():
1. Unlock pages.
2. Get writable pages.
3. Save state.
4. Update taint state.
5. Fork.
6. Set thread memory contents with taint.



----

Need to update the stack trackers on each fork?
Also need to be able to translate in breakpoint from Tracee to fill value

---

Need API for suspending a thread (tracee) in patcher.
Memcheck needs to suspend threads that hit sequence point until ALL threads have reached sequence point.

Add method to Tracee to suspend it?
No, add data in Patcher.

Memcheck needs to track # of threads that have been suspended.


---

Some system calls actually shouldn't be considered sequence points, since they don't affect the external world. E.g. since fstat depends on fd, not path, it should return the same results.

- FSTAT (ok if file is removed when open, permissions changed, etc.)
- GETDENTS
- GETEUID
- GETRLIMIT
- GETUID
- GETGID
- GETPID
- GETPPID
- GETUNAME

---

New approach:
1. Fork before sequence point; keep this thread suspended until next sequence point.
2. Pass thru any system calls that can be re-run... but this causes issues for multi-threaded programs. Also won't result in much of a performance boost.
3.


---

Instead of spawning new processes at the start of each round, keep the same one and just update contents of memory using the system call. This will result in fewer reads & writes, so it should result in significant speed-up. Just fork before to have exact replica for replaying if necessary.

STEPS:
- Rewrite system call checking -- these will first need to generate list of pointers to fetch, get data & taint mask, etc.

- Write code for converting copying system call data.

----

Problem: need to have other tracee wait for exited process. This will likely result in significant slowdown...
